/*
 * @Author: gitsrc
 * @Date: 2020-07-09 11:50:27
 * @LastEditors: gitsrc
 * @LastEditTime: 2020-07-09 12:06:40
 * @FilePath: /ServiceCar/utils/rediscluster/example/example3.go
 */
package main

import (
	"ServiceCar/utils/rediscluster"
	"fmt"
	"log"
	"time"
)

func main() {
	cluster, err := rediscluster.NewCluster(
		&rediscluster.Options{
			StartNodes:   []string{"127.0.0.1:9001", "127.0.0.1:9002", "127.0.0.1:9003"},
			ConnTimeout:  50 * time.Millisecond,
			ReadTimeout:  50 * time.Millisecond,
			WriteTimeout: 50 * time.Millisecond,
			KeepAlive:    16,
			AliveTime:    60 * time.Second,
		})

	if err != nil {
		log.Fatalf("redis.New error: %s", err.Error())
	}

	_, err = cluster.Do("MSET", "myfoo1", "mybar1", "myfoo2", "mybar2", "myfoo3", "mybar3")
	if err != nil {
		log.Fatalf("MSET error: %s", err.Error())
	}

	values, err := rediscluster.Strings(cluster.Do("MGET", "myfoo1", "myfoo5", "myfoo2", "myfoo3", "myfoo4"))
	if err != nil {
		log.Fatalf("MGET error: %s", err.Error())
	}

	for i := range values {
		fmt.Printf("reply[%d]: %s\n", i, values[i])
	}
}
